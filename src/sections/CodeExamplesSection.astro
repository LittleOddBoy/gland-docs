---
import CodeBlock from "@components/CodeBlock.astro";
---
<section class="py-24 border-t border-border bg-background-secondary px-container">
  <div class="max-w-3xl mx-auto text-center mb-16 space-y-4">
    <h2 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-text-primary to-text-secondary bg-clip-text text-transparent">
      Event-Driven Architecture in Action
    </h2>
    <!--
        <p class="subtitle">See how events flow through a Gland application</p>
          <div class="architecture-diagram">
            <img src="/public/event-flow.svg" alt="Gland Event Flow Diagram" />
          </div>
         -->
  </div>

  <div class="max-w-7xl mx-auto bg-background rounded-2xl border border-border shadow-xl overflow-hidden">
     {/* Tab Buttons */}
    <div class="flex flex-col sm:flex-row border-b border-border">
      <button
        class="tab-button group flex items-center gap-2 px-8 py-4 text-text-secondary hover:bg-background-tertiary data-[active=true]:text-primary data-[active=true]:border-b-2 data-[active=true]:border-primary transition-all"
        data-tab="basic"
        data-active="true"
      >
        <svg class="w-5 h-5 group-data-[active=true]:text-primary">
          <path
            fill="currentColor"
            d="M14 6l-4.5 4.5 4.5 4.5V6m-4 9H6v-2h4v2m0-4H6V9h4v2m0-4H6V5h4v2m10 2h-2v6h2V7m0 8h-2v2h2v-2z"
          ></path>
        </svg>
        Basic Flow
      </button>

       <button
        class="tab-button group flex items-center gap-2 px-8 py-4 text-text-secondary hover:bg-background-tertiary data-[active=true]:text-primary data-[active=true]:border-b-2 data-[active=true]:border-primary transition-all"
        data-tab="advanced"
      >
        <svg class="w-5 h-5 group-data-[active=true]:text-primary">
          <path
            fill="currentColor"
            d="M10 3H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1m10 10h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1M10 15H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1m13-8h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1z"
          ></path>
        </svg>
        Chained Events
      </button>
    </div>

    {/* Tab Contents */}
    <div class="p-8">
      {/* Basic Flow Tab */}
      <div class="tab-content" data-tab="basic">
        <div class="grid lg:grid-cols-2 gap-8">
          <div class="space-y-4">
            <h3 class="text-xl font-semibold text-text-primary">Core Event Flow</h3>
            <ol class="space-y-6">
              {[1,2,3,4].map(step => (
                <li class="flex items-start gap-4">
                  <div class="flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 text-primary flex items-center justify-center">
                    {step}
                  </div>
                  <div class="space-y-1">
                    <p class="text-text-primary">
                      {step === 1 && 'HTTP Request is sent to '}
                      {step === 2 && 'Controller emits '}
                      {step === 3 && 'Event listeners process '}
                      {step === 4 && 'Response event is emitted'}
                      {step !== 4 && (
                        <code class="font-mono text-sm bg-background-tertiary px-2 py-1 rounded">
                          {step === 1 ? '/users' : step === 2 ? 'users:list' : 'users:list'}
                        </code>
                      )}
                    </p>
                  </div>
                </li>
              ))}
            </ol>
          </div>

          <CodeBlock
            lang="typescript"
            filename="user.controller"
          >
            {
              `
            import { Controller, Context } from '@gland/core';

            @Controller('users')
            export class UserController {
              @Get('/')
              listUsers(ctx: Context) {
                // Emit event without knowing handlers
                ctx.emit('users:list', {
                  query: ctx.query,
                  auth: ctx.state.user
                });
              }
            }
            `
            }
          </CodeBlock>
        </div>
      </div>

      {/* Advanced Tab Content */}
      <div class="hidden tab-content" data-tab="advanced">
        <div class="grid lg:grid-cols-2 gap-8">
          <div class="space-y-6">
            <h3 class="text-xl font-semibold text-text-primary">Event Processing Chain</h3>

             <div class="flex flex-col md:flex-row items-center justify-between gap-2">
              {['auth:user:signup', 'auth:user:validated', 'auth:user:created'].map((event, idx) => (
                <>
                    <div class="p-3 rounded-lg border border-border bg-background-tertiary text-center w-full md:max-w-[32%]">
                    <div class="text-sm font-medium text-primary">{event}</div>
                    <div class="text-sm text-text-secondary mt-1">
                      {idx === 0 && 'Validate Input'}
                      {idx === 1 && 'Create DB Entry'}
                      {idx === 2 && 'Send Welcome Email'}
                    </div>
                  </div>
                  {idx < 2 && (
                    <div class="hidden md:block text-2xl text-text-secondary">â†’</div>
                  )}
                </>
              ))}
            </div>
          </div>

          <CodeBlock
            lang="typescript"
            filename="auth.channel"
          >
            {
              `
            import { Channel, On } from '@gland/core';

            @Channel('auth')
            export class AuthChannel {
              @On('user:signup')
              async handleSignup({ email, password }) {
                const user = await validateUser(email, password);
                ctx.emit('user:validated', user);
              }

              @On('user:validated')
              async createUserRecord(user) {
                const dbUser = await db.users.create(user);
                ctx.emit('user:created', dbUser);
              }
            }
            `
            }
          </CodeBlock>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  if (typeof window !== "undefined") {
    const tabContents = document.querySelectorAll('.tab-content');
    const tabButtons = document.querySelectorAll('[data-tab]');

    const handleTabChange = (tabId) => {
      tabButtons.forEach(button => {
        const isActive = button.dataset.tab === tabId;
        button.dataset.active = isActive;
      });


      tabContents.forEach(content => {
        const shouldShow = content.dataset.tab === tabId;
        content.classList.toggle('hidden', !shouldShow);

        if (shouldShow) {
          content.style.animation = 'tab-active 0.3s ease-out';
        } else {
          content.style.animation = '';
        }
      });


      const activeContent = document.querySelector(`.tab-content[data-tab="${tabId}"]`);
      if (activeContent) {
        activeContent.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    };


    handleTabChange('basic');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => handleTabChange(button.dataset.tab));
    });
  }
</script>